#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Wed Mar 14 11:53:04 2018

@author: Okada
"""

import sys
import argparse
import otomo.setup
import otomo.view_table
import otomo.regist_sample
import otomo.analysis_status
import otomo.regist_job
import otomo.qreport
import otomo.s3_upload
import otomo.reduction
import otomo.notify_slack
import otomo.CONFIG

from otomo import __version__
        
def main():
    prog = "otomo"
    parser = argparse.ArgumentParser(prog = prog)
    parser.add_argument("--version", action = "version", version = prog + "-" + __version__)
    subparsers = parser.add_subparsers()

    ##########
    # setup 
    setup_parser = subparsers.add_parser("setup", help = "Create SQLiteDB")
    setup_parser.add_argument("--wdir", metavar = "/path/to/dir", help = "gcat_workflow working directory", type = str, required=True)
    setup_parser.add_argument("--ecsub", help = "create ecsub db", action = 'store_true')
    setup_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    setup_parser.set_defaults(func = otomo.setup.main)

    ##########
    # view 
    view_parser = subparsers.add_parser("view", help = "View Tables")
    view_parser.add_argument('--table', choices=['analysis', 'upload', 'sample_stage', 'job', 'success', 'error', 'stop', 'job_count', 'hdd_usage'], help = 'table name')
    view_parser.add_argument("--option", metavar = "limit 10", help = "SQL option", type = str, default = "")
    view_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    view_parser.set_defaults(func = otomo.view_table.main)

    ##########
    # insert into samples 
    regsample_parser = subparsers.add_parser("regsample", help = "Insert Into Samples")
    regsample_parser.add_argument("--samples", metavar = "/path/to/samples.json", help = "", type = str, required=True)
    regsample_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    regsample_parser.set_defaults(func = otomo.regist_sample.main)
    
    ##########
    # set analysis status 
    analysis_parser = subparsers.add_parser("analysis", help = "Set Job Status")
    analysis_parser.add_argument("--sample", metavar = "sample", help = "", type = str, default = "")
    analysis_parser.add_argument("--status", metavar = "RUN", help = "RUN/ERROR/STOP/SUCCESS/UPLOADED", type = str, default = "")
    analysis_parser.add_argument("--stage", metavar = "", help = "stage  name", type = str, default = "")
    analysis_parser.add_argument("--error_text", metavar = "", help = "error_text", type = str, default = "")
    analysis_parser.add_argument("--stop_reason", metavar = "", help = "stop reason", type = str, default = "")
    analysis_parser.add_argument("--commit", help = "multiple mode: request", action = 'store_true')
    analysis_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    analysis_parser.set_defaults(func = otomo.analysis_status.main)

    ##########
    # insert into job results 
    regjob_parser = subparsers.add_parser("regjob", help = "Insert Into Job Status")
    regjob_parser.add_argument("--qacct", metavar = "/path/to/qacct.txt", help = "", type = str, required=True)
    regjob_parser.add_argument("--limit", metavar = "30", help = "Minutes, jobs ended after (set 0, not filt)", type = int, default = 0)
    regjob_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    regjob_parser.set_defaults(func = otomo.regist_job.main)
    
    ##########
    # report 
    qreport_parser = subparsers.add_parser("qreport", help = "View Report")
    qreport_parser.add_argument("-f", "--failed", help = "display failed or abnoraml exit status job only.", action = 'store_true')
    qreport_parser.add_argument("-b", "--begin", metavar = "[YYYYMMDDhhmm]", help = "The earliest createdAt time for jobs to be summarized, in the format [YYYYMMDDhhmm]", type = str, default = "")
    qreport_parser.add_argument("--max", metavar = "20", help = "Maximum display count", type = int, default = 0)
    qreport_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    qreport_parser.set_defaults(func = otomo.qreport.main)

    ##########
    # notify_slack 
    quota_parser = subparsers.add_parser("notify_slack", help = "Notify Quota")
    quota_parser.add_argument("--message_file", metavar = "/path/to/message.txt", help = "", type = str, required=True)
    quota_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    quota_parser.set_defaults(func = otomo.notify_slack.main)

    ##########
    # upload 
    upload_parser = subparsers.add_parser("upload", help = "Upload outputs to object storage")
    upload_parser.add_argument("--max", metavar = "200", help = "Maximum upload samples", type = int, default = 1000)
    upload_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    upload_parser.set_defaults(func = otomo.s3_upload.main)

    ##########
    # remove temporary files of failure samples
    reduction_parser = subparsers.add_parser("reduction", help = "Remove temporary files of failure samples")
    reduction_parser.add_argument("--conf", metavar = "/path/to/otomo.conf", help = "config file", type = str, default = otomo.CONFIG.DEFAULT_CONF)
    reduction_parser.set_defaults(func = otomo.reduction.main)

    argv = sys.argv[1:]
    if len(argv) < 1:
        argv = [""]
        
    args = parser.parse_args(argv)
    
    return args.func(args)
    
if __name__ == "__main__":
    sys.exit(main())
